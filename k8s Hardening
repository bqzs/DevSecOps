Secure your Pods
  Containers that run applications should not have root privileges
  Containers should have an immutable filesystem, meaning they cannot be altered or added to (depending on the purpose of the container, this may not be possible) 
  Container images should be frequently scanned for vulnerabilities or misconfigurations 
  Privileged containers should be prevented  
  Pod Security Standards and Pod Security Admission

Hardening and Separation of your Network
  Access to the control plane node should be restricted using a firewall and role-based access control in an isolated network
  Control plane components should communicate using Transport Layer Security (TLS) certificates
  An explicit deny policy should be created
  Credentials and sensitive information should not be stored as plain text in configuration files. Instead, they should be encrypted and in Kubernetes secrets

Using Authentication and Authorisation Optimally 
  Anonymous access should be disabled 
  Strong user authentication should be used 
  RBAC policies should be created for the various teams using the cluster and the service accounts utilised 

Keeping an Eye Out
  Audit logging should be enabled 
  A log monitoring and alerting system should be implemented

Security Never Sleeps
  Security patches and updates should be applied quickly
  Vulnerability scans and penetration tests should be done semi-regularly 
  Any obsolete components in the cluster should be removed

Do not use the --privileged flag or mount a Docker socket inside the container
Do not run as root inside the container. Use a different user or user namespaces
Drop all capabilities (--cap-drop=all) and enable only those that are required (--cap-add=...).
Use the “no-new-privileges” security option to prevent processes from gaining more privileges, for example through suid binaries.
Limit resources available to the container. Resource limits can protect the machine from denial of service attacks.
Adjust seccomp, AppArmor (or SELinux) profiles to restrict the actions and syscalls available for the container to the minimum required.



Attack Vectors 

Misconfigured Containers	-> Misconfigured containers will have privileges that are not necessary for the operation of the container. For example, a container running in "privileged" mode will have access to the host operating system - removing the layers of isolation.

Vulnerable Images         -> There have been numerous incidents of popular Docker images being backdoored to perform malicious actions such as crypto mining.

Network Connectivity	    -> A container that is not correctly networked can be exposed to the internet. For example, a database container for a web application should only be accessible to the web application container - not the internet.

